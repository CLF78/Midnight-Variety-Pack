#!/usr/bin/env python3

# configure.py
# Generates the Ninja build file.

###########
# Imports #
###########

import argparse
import shutil
import sys
from enum import Enum
from pathlib import Path

from tools.utils.asset_manager import GlobalAssetManager
from tools.utils.ninja_syntax_ex import Writer as NinjaWriter
from tools.utils.patch_manager import RiivoPatchManager
from tools.utils.path_utils import change_root, change_stem_suffix, escape_win_path, unix_to_windows, add_to_set

#####################
# Dependency Checks #
#####################

if sys.version_info < (3, 8):
    raise SystemExit('Please update your copy of Python to 3.8 or greater. Currently running on: ' + sys.version.split()[0])

try:
    import json5
except ImportError:
    raise SystemExit('JSON5 not found! Please install it with `python -m pip install json5`')

#######################
# Base Project Layout #
#######################

# Directories
ROOT_DIR = Path(__file__).parent
ASSETS_DIR = Path(ROOT_DIR, 'assets')
BUILD_DIR = Path(ROOT_DIR, 'build')
OUT_DIR = Path(ROOT_DIR, 'out', 'mkm2')
SRC_DIR = Path(ROOT_DIR, 'src')
TOOL_DIR = Path(ROOT_DIR, 'tools')
if ' ' in str(ROOT_DIR):
    raise SystemExit('Make sure that the project\'s directory does not have spaces in its path!')

# Files
NINJA_FILE = Path(ROOT_DIR, 'build.ninja')
PORT_FILE = Path(ROOT_DIR, 'versions-mkw.txt')
SYMBOL_FILE = Path(ROOT_DIR, 'externals-mkw.txt')

# Constants
LOCALES = ['E', 'F', 'G', 'I', 'J', 'K', 'M', 'Q', 'S', 'U']
REGIONS = ['P', 'E', 'J', 'K']
LOADER_HOOK_ADDR = 0x80004010
LOADER_MAX_ADDR = 0x80005E00

# Debug Log Information
LOG_LEVELS = Enum('LogLevel', ['DEBUG', 'WARN', 'ERROR', 'FATAL'], start=0)
LOG_LEVEL = LOG_LEVELS.WARN

##################
# Mod Components #
##################

# X_DIR = Original asset directory
# X_BUILD_DIR = Intermediate compilation directory
# X_FINAL_DIR = Output directory
# X_PATCH_DIR = Game disc folder to be patched

# Track directories - for courses
TRACKS_FINAL_DIR = Path(OUT_DIR, 'Tracks')
TRACKS_PATCH_DIR = Path('Race', 'Course')

# Common asset directories - for assets that go in /Race/Common.szs
COMMON_ASSETS_DIR = Path(ASSETS_DIR, 'common')
COMMON_ASSETS_BUILD_DIR = Path(BUILD_DIR, 'common_assets')
COMMON_ASSETS_FINAL_DIR = Path(OUT_DIR, 'Common')
COMMON_ASSETS_PATCH_DIR = Path('Race')

# UI asset directories - for assets that go in /Scene/UI/X.szs
UI_ASSETS_DIR = Path(ASSETS_DIR, 'menu')
UI_ASSETS_BUILD_DIR = Path(BUILD_DIR, 'menu')
UI_ASSETS_FINAL_DIR = Path(OUT_DIR, 'UI')
UI_ASSETS_PATCH_DIR = Path('Scene', 'UI')

# Text message directories - for the various build steps involving text message files
BMG_DIR = Path(UI_ASSETS_DIR, 'message')
BMG_BUILD_DIR = Path(BUILD_DIR, 'messages')
BMG_MERGED_BUILD_DIR = Path(BMG_BUILD_DIR, 'merged')
BMG_DESTINATIONS = {
    'Common': ['Award', 'Channel', 'Globe', 'MenuMulti', 'MenuOther', 'MenuSingle', 'Race', 'Title'],
    'Menu': ['Award', 'Channel', 'Globe', 'MenuMulti', 'MenuOther', 'MenuSingle', 'Race', 'Title'],
    'Race': ['Award', 'Race']
}

# Music directories - for track music
MUSIC_FINAL_DIR = Path(OUT_DIR, 'Music')
MUSIC_PATCH_DIR = Path('sound', 'strm')

# Sound effects directories - for sound effects (new)
SFX_DIR = Path(ASSETS_DIR, 'sfx')
SFX_FINAL_DIR = Path(OUT_DIR, 'sfx')
SFX_PATCH_DIR = Path('sound', 'sfx')

# Payload code directories - for custom code (new)
PAYLOAD_CODE_DIR = Path(SRC_DIR, 'payload')
PAYLOAD_CODE_BUILD_DIR = Path(BUILD_DIR, 'payload')
PAYLOAD_CODE_PREPROC_DIR = Path(BUILD_DIR, 'preproc')
PAYLOAD_CODE_FINAL_DIR = Path(OUT_DIR, 'Code')

# Loader directories/files - for loader code (new)
LOADER_CODE_DIR = Path(SRC_DIR, 'loader')
LOADER_BUILD_DIR = Path(BUILD_DIR, 'loader')
LOADER_OUT_FILE = Path(OUT_DIR, 'Loader.bin')

# Common code directory - for common code between payload and loader
COMMON_CODE_DIR = Path(SRC_DIR, 'common')
COMMON_CODE_BUILD_DIR = Path(BUILD_DIR, 'common_code')

# Include directories
INCLUDE_DIRS = [PAYLOAD_CODE_DIR, LOADER_CODE_DIR, COMMON_CODE_DIR]

# Cup - for data used/generated by the Cup Builder tool
CUP_DATA_FILE = Path(ASSETS_DIR, 'course', 'data.json5')
CUP_DATA_BUILD_DIR = Path(PAYLOAD_CODE_DIR, 'midnight', 'cup')
CUP_ICONS_BUILD_DIR = Path(BUILD_DIR, 'cupicons')
CUP_ICONS_TIMESTAMP_FILE = Path(CUP_ICONS_BUILD_DIR, '.extracted')
CUP_DATA_OUT_FILE = Path(CUP_DATA_BUILD_DIR, 'CupData.cpp')
CUP_DATA_COUNT_FILE = Path(CUP_DATA_BUILD_DIR, 'CupCounts.h')
CUP_DATA_TEXT_FILES = [Path(BMG_BUILD_DIR, f'CupData{locale}.bmg.json5') for locale in LOCALES]

# Auto-generated Riivolution XML
XML_GAME_ID = 'RMC'
XML_PATCH_NAME = 'Mario Kart Midnight'
XML_PATCH_ID = OUT_DIR.stem
XML_ROOT_DIR = OUT_DIR.parent
XML_BUILD_FILE = Path(BUILD_DIR, f'{XML_PATCH_ID}.xml')
XML_OUT_FILE = Path(XML_ROOT_DIR, 'riivolution', f'{XML_PATCH_ID}.xml')

#########
# Tools #
#########

BMG_MERGE = Path(TOOL_DIR, 'bmg_tools', 'merge.py')
CC = Path(file) if (file := shutil.which('mwcceppc.exe')) else Path(TOOL_DIR, 'cw', 'mwcceppc.exe')
CUP_BUILDER = Path(TOOL_DIR, 'cup_builder', 'exporter.py')
CW_WRAPPER = Path(TOOL_DIR, 'cw', 'mwcceppc_wine_wrapper.py')
CW_WRAPPER_WIN = Path(TOOL_DIR, 'cw', 'mwcceppc_windows_wrapper.py')
KAMEK = Path(file) if (file := shutil.which('Kamek')) else Path(TOOL_DIR, 'kamek', f'Kamek{".exe" if sys.platform == "win32" else ""}')
PREPROCESSOR = Path(TOOL_DIR, 'cw', 'preprocess.py')
SIZE_CHECKER = Path(TOOL_DIR, 'utils', 'check_file_size.py')
WUJ5 = Path(TOOL_DIR, 'wuj5', 'wuj5.py')
XML_TOOL = Path(TOOL_DIR, 'xml_tool', 'xml_tool.py')

##################
# Compiler Flags #
##################

CFLAGS = [
    '-I-',
    '-Cpp_exceptions off',
    '-enum int',
    '-fp fmadd',
    '-gccext on',
    '-maxerrors 1',
    '-msext on',
    '-nostdinc',
    '-O4',
    '-inline noauto',
    '-once',
    '-pragma "cpp_extensions on"',
    '-pragma "cpp1x on"',
    '-pragma "gprfloatcopy on"',
    '-pragma "no_static_dtors on"',
    '-rostr',
    '-RTTI off',
    '-schedule on',
    '-sdata 0',
    '-sdata2 0',
    '-use_lmw_stmw on']

# Add include directories
for dir in INCLUDE_DIRS:
    CFLAGS.append(f'-i {escape_win_path(unix_to_windows(dir))}')

##########
# Assets #
##########

# For raw assets:
# - The key is the source path
# - The value can be:
#   - Empty, if the file does not have to be renamed and the destination matches the source hierarchy
#   - A string, if the file has to be renamed, but the destination matches the source hierarchy
#   - A Path, if the file has to be moved because the destination doesn't match the source hierarchy

# For packed assets:
# - The key is the packed filename WITHOUT EXTENSION
# - The value is a dict of raw assets to be contained within

COMMON_ASSETS = {
    'CommonMKM': {
        Path(COMMON_ASSETS_DIR, 'kumo.brres'): None
    }
}

SFX_ASSETS = {
    Path(SFX_DIR, 'Final_Lap.brstm'): '116',
    Path(SFX_DIR, 'Mega_Mushroom.brstm'): '274',
    Path(SFX_DIR, 'Star.brstm'): '270',
    Path(SFX_DIR, 'Title_Screen.brstm'): '84'
}

# DO NOT ADD TEXT MESSAGES HERE, THEY WILL BE ADDED AUTOMATICALLY BY THE SCRIPT
UI_ASSETS = {
	'AwardMKM': {
        Path(CUP_ICONS_BUILD_DIR): Path('cups')
	},

	'MenuSingleMKM': {
        Path(UI_ASSETS_DIR, 'button', 'ctrl', 'BattleStageSelectStage.brctr.json5'): None,
		Path(UI_ASSETS_DIR, 'button', 'ctrl', 'CupSelectCupArrowLeft.brctr.json5'): None,
		Path(UI_ASSETS_DIR, 'button', 'ctrl', 'CupSelectCupArrowRight.brctr.json5'): None,
        Path(UI_ASSETS_DIR, 'control', 'ctrl', 'BattleCupSelectStage.brctr.json5'): None,
        Path(CUP_ICONS_BUILD_DIR): Path('cups')
	},

	'MenuMultiMKM': {
        Path(UI_ASSETS_DIR, 'button', 'ctrl', 'BattleStageSelectStage.brctr.json5'): None,
		Path(UI_ASSETS_DIR, 'button', 'ctrl', 'CupSelectCupArrowLeft.brctr.json5'): None,
		Path(UI_ASSETS_DIR, 'button', 'ctrl', 'CupSelectCupArrowRight.brctr.json5'): None,
        Path(UI_ASSETS_DIR, 'control', 'ctrl', 'BattleCupSelectStage.brctr.json5'): None,
        Path(CUP_ICONS_BUILD_DIR): Path('cups')
	},

	'RaceMKM': {
        Path(CUP_ICONS_BUILD_DIR): Path('cups'),
        Path(UI_ASSETS_DIR, 'game_image', 'ctrl', 'time_number.brctr.json5'): None,
        Path(UI_ASSETS_DIR, 'game_image', 'anim', 'game_image_lap_texture_pattern_0_9.brlan.json5'): None,
        Path(UI_ASSETS_DIR, 'game_image', 'timg', 'fm_item_pikakumo.tpl.png'): None
	},

	'RaceMKM_E': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_E_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_E.brlyt.json5'): 'time_number_texture'
	},

	'RaceMKM_F': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_F_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_F.brlyt.json5'): 'time_number_texture'
	},

	'RaceMKM_G': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_G_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_G.brlyt.json5'): 'time_number_texture'
	},

	'RaceMKM_I': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_I_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_I.brlyt.json5'): 'time_number_texture'
	},

	'RaceMKM_J': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_E_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_E.brlyt.json5'): 'time_number_texture'
	},

	'RaceMKM_K': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_E_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_E.brlyt.json5'): 'time_number_texture',
        Path(UI_ASSETS_DIR, 'game_image', 'anim', 'game_image_lap_texture_pattern_0_9_K.brlan.json5'): 'game_image_lap_texture_pattern_0_9'
	},

	'RaceMKM_M': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_S_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_S.brlyt.json5'): 'time_number_texture',
	},

	'RaceMKM_Q': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_F_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_F.brlyt.json5'): 'time_number_texture',
	},

	'RaceMKM_S': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_S_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_S.brlyt.json5'): 'time_number_texture',
	},

	'RaceMKM_U': {
        Path(UI_ASSETS_DIR, 'game_image', 'timg', f'tt_lap_E_lap{a}.tpl.png'): None for a in range(4,10) } | {
        Path(UI_ASSETS_DIR, 'game_image', 'blyt', 'time_number_texture_E.brlyt.json5'): 'time_number_texture',
	},
}

###################
# Parse Arguments #
###################

parser = argparse.ArgumentParser(description='Ninja Configurator Script')
parser.add_argument('--clean', action='store_true', help='specify to remove all build outputs')
parser.add_argument('--loglevel', choices=LOG_LEVELS._member_names_, default="ERROR",
                    help='specify the log level to be used (default: "ERROR")')
args = parser.parse_args()

LOG_LEVEL = LOG_LEVELS[args.loglevel].value
if args.clean:
    shutil.rmtree(BUILD_DIR, ignore_errors=True)
    shutil.rmtree(OUT_DIR.parent, ignore_errors=True)
    CUP_DATA_OUT_FILE.unlink(True)
    CUP_DATA_COUNT_FILE.unlink(True)

###################
# Write Variables #
###################

writer = NinjaWriter()
writer.variable('builddir', BUILD_DIR)
writer.newline()

writer.variable('cc', f'{sys.executable} {CW_WRAPPER_WIN if sys.platform == "win32" else CW_WRAPPER} {CC}')
writer.variable('cflags', CFLAGS)
writer.newline()
writer.variable('kamek', KAMEK)
writer.variable('port_file', PORT_FILE)
writer.variable('symbol_file', SYMBOL_FILE)
writer.newline()

###############
# Write Rules #
###############

writer.rule('cup_builder',
            command=f'{sys.executable} {CUP_BUILDER} $in $bmgDir $szsDir $brstmDir $iconDir $codeDir $logfile',
            description='Run Cup Exporter',
            depfile='$logfile',
            deps='gcc')

writer.rule('preprocess',
            command=f'{sys.executable} {PREPROCESSOR} $in -m $symbol_file -o $out {" ".join(["-i " + str(dir) for dir in INCLUDE_DIRS])}',
            description='Preprocess Code $in_short')

writer.rule('cw',
            command=f'$cc $cflags -c -D__CODE_REGION__=$region -D__LOG_LEVEL__={LOG_LEVEL} -o $out_conv -MDfile $out.d $in_conv',
            depfile='$out.d',
            description='Compile $in_short ($region_id)')

writer.rule('kmdynamic',
            command='$kamek $in -dynamic -versions=$port_file -externals=$symbol_file -output-kamek=$out -select-version=$selectversion -q',
            description='Link Code ($selectversion)')

writer.rule('kmstatic',
            command=[f'$kamek $in_code -static=$loadaddr -externals=$symbol_file -output-code=$out_bin -output-riiv=$out_riiv -valuefile=$out_valuefile -input-riiv=$in_xml -q',
                    f'{sys.executable} {SIZE_CHECKER} $out_bin $size'],
            description='Link Loader')

writer.rule('bmg_merge',
            command=f'{sys.executable} {BMG_MERGE} $in -o $out',
            description='Merge $out_short Messages ($region)')

writer.rule('size_check',
            command=f'{sys.executable} {SIZE_CHECKER} $in $size',
            description='Check size of $in_short')

writer.rule('wuj5',
            command=f'{sys.executable} {WUJ5} encode $in -o $out',
            description='Encode $in_short with wuj5')

writer.rule('wimgt',
            command='wimgt enc -q -D $out -o --no-mm --transform=$encode $in',
            description='Encode $in_short with wimgt')

if sys.platform == 'win32':
    writer.rule('copy_file',
                command='cmd /c mklink /h $out $in',
                description='Copy $in_short')
    writer.rule('copy_dir',
                command='cmd /c mklink /d $out $in_dir',
                description='Copy $in_short',
                restat='1')
else:
    writer.rule('copy_file',
                command='ln -f -T $in $out',
                description='Copy $in_short')
    writer.rule('copy_dir',
                command='ln -sf -T $in_dir $out',
                description='Copy $in_short',
                restat='1')

writer.rule('wszst',
            command='wszst c -q -D $out -o --pt-dir --links --compr $compress $in_dir',
            description='Pack $in_short with wszst')

writer.rule('xml_tool',
            command=f'{sys.executable} {XML_TOOL} $out $gameid $modname $patchid $patches $externals',
            description='Generate Riivolution XML')

########################
# Write Build Commands #
########################

# Write cup builder rule
writer.build('cup_builder',
            [CUP_DATA_OUT_FILE, CUP_DATA_COUNT_FILE, CUP_ICONS_TIMESTAMP_FILE] + CUP_DATA_TEXT_FILES,
            CUP_DATA_FILE,
            bmgDir=BMG_BUILD_DIR,
            szsDir=TRACKS_FINAL_DIR,
            brstmDir=MUSIC_FINAL_DIR,
            iconDir=CUP_ICONS_BUILD_DIR,
            codeDir=CUP_DATA_BUILD_DIR,
            logfile=Path(BUILD_DIR, 'data.json5.d'))

# Create Riivolution patches
patchManager = RiivoPatchManager(writer, XML_BUILD_FILE, XML_GAME_ID, XML_PATCH_NAME, XML_PATCH_ID)
patchManager.addPatch('folder',
                      external=f'/{PAYLOAD_CODE_FINAL_DIR.relative_to(XML_ROOT_DIR)}',
                      disc='/',
                      create='true')

patchManager.addPatch('folder',
                      external=f'/{COMMON_ASSETS_FINAL_DIR.relative_to(XML_ROOT_DIR)}',
                      disc=f'/{COMMON_ASSETS_PATCH_DIR}',
                      create='true')

patchManager.addPatch('folder',
                      external=f'/{MUSIC_FINAL_DIR.relative_to(XML_ROOT_DIR)}',
                      disc=f'/{MUSIC_PATCH_DIR}',
                      create='true')

patchManager.addPatch('folder',
                      external=f'/{SFX_FINAL_DIR.relative_to(XML_ROOT_DIR)}',
                      disc=f'/{SFX_PATCH_DIR}',
                      create='true')

patchManager.addPatch('folder',
                      external=f'/{TRACKS_FINAL_DIR.relative_to(XML_ROOT_DIR)}',
                      disc=f'/{TRACKS_PATCH_DIR}',
                      create='true')

patchManager.addPatch('folder',
                      external=f'/{UI_ASSETS_FINAL_DIR.relative_to(XML_ROOT_DIR)}',
                      disc=f'/{UI_ASSETS_PATCH_DIR}',
                      create='true')

# Write the command out
patchManager.writeCommand()

# Scan for shared C/C++ files
commonInputs = set((COMMON_CODE_DIR.rglob('*.cpp')))
commonInputs.update(COMMON_CODE_DIR.rglob('*.c'))
commonOutputs = []

# Parse each file
for file in sorted(commonInputs):

    # Get the destination path
    output = change_root(file, COMMON_CODE_DIR, COMMON_CODE_BUILD_DIR).with_suffix('.o')
    commonOutputs.append(output)

    # Write the corresponding build command
    writer.build('cw',
                 output,
                 file,
                 order_only_inputs=CUP_DATA_COUNT_FILE,
                 out_conv=escape_win_path(unix_to_windows(output)),
                 in_conv=escape_win_path(unix_to_windows(file)),
                 in_short=file.stem,
                 region=-1,
                 region_id='ALL')

# Scan for payload C/C++ files and add the auto-generated files
payloadInputs = set(PAYLOAD_CODE_DIR.rglob('*.cpp'))
payloadInputs.update(PAYLOAD_CODE_DIR.rglob('*.c'))
payloadInputs.add(CUP_DATA_OUT_FILE)

# Initialize output lists
payloadOutputsByRegion = {key: commonOutputs.copy() for key in REGIONS}
payloadOutputs = set()

# Parse each file
for file in sorted(payloadInputs):

    # Write the preprocessor build command
    preproc_out = change_root(file, PAYLOAD_CODE_DIR, PAYLOAD_CODE_PREPROC_DIR)
    writer.build('preprocess',
                 preproc_out,
                 file,
                 in_short=file.name)

    # Obtain the configuration data
    configFile = file.with_suffix('.json5')
    if configFile.is_file():
        with configFile.open(encoding='utf-8') as f:
            configData = set(json5.load(f).get('regions', []))
    else:
        configData = set()

    # Parse each region
    for i, region in enumerate(REGIONS):

        # Get the destination path
        output = change_root(file, PAYLOAD_CODE_DIR, PAYLOAD_CODE_BUILD_DIR)
        output = change_stem_suffix(output, region if region in configData else '')
        output = output.with_suffix('.o')

        # Add it to the outputs for the current region
        payloadOutputsByRegion[region].append(output)

        # Write the corresponding build command and make sure it's not duplicated
        if output not in payloadOutputs:
            writer.build('cw',
                         output,
                         preproc_out,
                         order_only_inputs=CUP_DATA_COUNT_FILE,
                         out_conv=escape_win_path(unix_to_windows(output)),
                         in_conv=escape_win_path(unix_to_windows(preproc_out)),
                         in_short=file.name,
                         region=i if region in configData else -1,
                         region_id=region if region in configData else 'ALL')
            payloadOutputs.add(output)

# Initialize containers for loader code output
loaderInputs = set(LOADER_CODE_DIR.rglob('*.cpp'))
loaderInputs.update(LOADER_CODE_DIR.rglob('*.c'))
loaderOutputs = commonOutputs.copy()

# Parse each file
for file in sorted(loaderInputs):

    # Get the destination path
    output = change_root(file, LOADER_CODE_DIR, LOADER_BUILD_DIR).with_suffix('.o')
    loaderOutputs.append(output)

    # Write the corresponding build command
    writer.build('cw',
                 output,
                 file,
                 order_only_inputs=CUP_DATA_COUNT_FILE,
                 out_conv=escape_win_path(unix_to_windows(output)),
                 in_conv=escape_win_path(unix_to_windows(file)),
                 in_short=file.stem,
                 region=-1,
                 region_id='ALL')

# Write the Kamek linking rules
# Code commands
for region, outputs in payloadOutputsByRegion.items():
    writer.build('kmdynamic',
                 Path(PAYLOAD_CODE_FINAL_DIR, f'code{region}.bin'),
                 sorted(outputs),
                 implicit_inputs=['$port_file', '$symbol_file'],
                 selectversion=region)

# Loader command
writer.build('kmstatic',
             [LOADER_OUT_FILE, XML_OUT_FILE],
             loaderOutputs + [XML_BUILD_FILE],
             implicit_inputs=['$symbol_file'],
             in_code=' '.join(map(str, loaderOutputs)),
             in_xml=XML_BUILD_FILE,
             out_bin=LOADER_OUT_FILE,
             out_riiv=XML_OUT_FILE,
             out_valuefile=f'/{LOADER_OUT_FILE.relative_to(XML_ROOT_DIR)}',
             loadaddr=hex(LOADER_HOOK_ADDR),
             size=LOADER_MAX_ADDR - LOADER_HOOK_ADDR)

# Merge and add localized messages to the UI asset list
for locale, cupTextFile in zip(LOCALES, CUP_DATA_TEXT_FILES):
    for file, dests in BMG_DESTINATIONS.items():

        baseFile = Path(BMG_DIR, file) # original game messages
        destFile = Path(BMG_MERGED_BUILD_DIR, locale, f'{file}.bmg.json5')

        # Add the possible payloadInputs if they exist
        payloadInputs = []
        add_to_set(payloadInputs, change_stem_suffix(baseFile, f'_{locale}.bmg.json5'))
        add_to_set(payloadInputs, change_stem_suffix(baseFile, 'Wiimmfi.bmg.json5'))
        add_to_set(payloadInputs, change_stem_suffix(baseFile, f'Wiimmfi_{locale}.bmg.json5'))
        add_to_set(payloadInputs, change_stem_suffix(baseFile, 'MKM.bmg.json5'))
        add_to_set(payloadInputs, change_stem_suffix(baseFile, f'MKM_{locale}.bmg.json5'))

        # Add the auto-generated messages to Common.bmg
        if file == 'Common':
            payloadInputs.append(cupTextFile)

        # Only run the merge tool if necessary
        if len(payloadInputs) > 1:
            writer.build('bmg_merge',
                         destFile,
                         payloadInputs,
                         out_short=destFile.stem,
                         region=locale)

        # Add the asset entry to each file that requires it
        newDict = {destFile: Path('message', f'{file}.bmg')}
        for dest in dests:
            destKey = f'{dest}MKM_{locale}'
            if destKey not in UI_ASSETS:
                UI_ASSETS[destKey] = newDict
            else:
                UI_ASSETS[destKey] |= newDict

# Initialize the asset manager and patch manager
assetManager = GlobalAssetManager(writer)

# Add Common assets
for file, subFiles in COMMON_ASSETS.items():
    buildDir = Path(COMMON_ASSETS_BUILD_DIR, f'{file}.d')
    packFile = Path(COMMON_ASSETS_FINAL_DIR, file).with_suffix('.szs')
    assetManager.addManager(subFiles, COMMON_ASSETS_DIR, buildDir, packFile)

# Add SFX assets
assetManager.addManager(SFX_ASSETS, SFX_DIR, SFX_FINAL_DIR, SFX_FINAL_DIR)

# Add UI assets
for file, subFiles in UI_ASSETS.items():
    buildDir = Path(UI_ASSETS_BUILD_DIR, f'{file}.d')
    packFile = Path(UI_ASSETS_FINAL_DIR, file).with_suffix('.szs')
    assetManager.addManager(subFiles, UI_ASSETS_DIR, buildDir, packFile)

# Write build commands
assetManager.writeCommands()

# Write the file out
writer.flush(NINJA_FILE)
